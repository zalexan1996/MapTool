<li class="tree-view-item">
    <div class="d-flex @selectedClass">
        @if (Info.Children.Count > 0)
        {
            <iconify-icon @onclick="Expand" inline width="12" height="12" class="expander-icon" icon="@(IsExpanded ? "oi:caret-bottom" : "oi:caret-right")"></iconify-icon>
        }
        <div @onclick="OnItemClick">
            <iconify-icon inline width="12" height="12" class="expander-icon" icon="oi:@Info.IconName"></iconify-icon>
            <span class="item-text" title="@Info.Title">@Info.Name</span>
        </div>
    </div>
    <hr class="horizontal-rule" />
                            
    @if(IsExpanded)
    {
        <ul class="tree-view-child-list">
            @foreach(var child in Info.Children)
            {
                <TreeViewItem Info="child" @ref="HackySolution" ParentTreeView="ParentTreeView"/>
            }
        </ul>
    }
</li>

@code {

    public delegate void ExpandedChangedDelegate(TreeViewItem item, bool newValue);
    public delegate void SelectedDelegate(TreeViewItem newItem);
    public event ExpandedChangedDelegate? OnExpandedChanged;
    public event SelectedDelegate? OnSelected;

    [Parameter, EditorRequired]
    public TreeViewItemInfo Info { get; set; }

    private List<TreeViewItem> Children { get; set; } = new();
    private TreeViewItem? HackySolution
    {
        set
        {
            if (value != null)
            {
                Children.Add(value);
            }
        }
    }

    [Parameter]
    public TreeView ParentTreeView { get; set; }

    private string selectedClass = "";

    public bool IsExpanded
    {
        get
        {
            return _isExpanded;
        }
        set
        {
            _isExpanded = value;
            OnExpandedChanged?.Invoke(this, _isExpanded);
            if (!IsExpanded)
            {
                _isSelected = false;
            }
        }
    }

    private bool _isExpanded = true;

    public bool IsSelected => _isSelected;
    private bool _isSelected { get; set; }

    private void Expand(MouseEventArgs e)
    {
        IsExpanded = !IsExpanded;
        StateHasChanged();
    }

    public void Select()
    {
        _isSelected = true;
        selectedClass = "selected";
        OnSelected?.Invoke(this);
        StateHasChanged();
        ParentTreeView.ChangeSelection(this);
    }

    public void Unselect()
    {
        _isSelected = false;
        selectedClass = "";
        StateHasChanged();
    }


    private void OnItemClick(MouseEventArgs e)
    {
        if (IsSelected)
        {
            Unselect();
        }
        else
        {
            Select();
        }
    }
}