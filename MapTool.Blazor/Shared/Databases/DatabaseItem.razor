@using MapTool.Core.Common.Exceptions;
@inject IDatabaseManagementService _dbService;

<div class="card col-11 m-3">
    <div class="card-body">
        <div class="d-inline h5">
            @DatabaseName
            <span class="badge mx-4 @(IsDatabaseInUse ? "" : "d-none")">Active</span>
        </div>
        <div class="row mb-4 mt-1">
            <h6 class="card-subtitle text-muted col-auto">Path: @DatabasePath</h6>
        </div>
        <div class="row justify-content-between">
            <button class="col-auto py-2 px-3 btn btn-sm btn-success" @onclick="OnUseDatabase">Use</button>
            <button class="col-auto py-2 px-3 btn btn-sm btn-danger" @onclick="OnDeleteDatabase">Delete</button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public string DatabasePath { get; set; }

    [Parameter, EditorRequired]
    public string DatabaseName { get; set; }

    private bool IsDatabaseInUse { get; set; }

    private async void OnDeleteDatabase()
    {
        Console.WriteLine($"Deleting database: {DatabasePath}");

        if (!_dbService.DoesDatabaseExist(DatabaseName))
        {
            throw new DatabaseNonExistException($"Database does not exist: '{DatabaseName}'");
        }

        if (!await _dbService.DeleteDatabase(DatabasePath))
        {
            Console.WriteLine("Failed to delete the database because it is in use. Switch to another database, then try again.");
            return;
        }


        await OnDatabaseDeleteCallback.InvokeAsync(new Tuple<string, string>(DatabaseName, DatabasePath));
    }

    private async void OnUseDatabase()
    {
        await _dbService.LoadDatabase(DatabaseName, CancellationToken.None);
    }

    protected override void OnParametersSet()
    {
        IsDatabaseInUse = _dbService?.CurrentDatabasePath == DatabasePath;
        StateHasChanged();
        base.OnParametersSet();
    }

    [Parameter, EditorRequired]
    public EventCallback<Tuple<string, string>> OnDatabaseDeleteCallback { get; set; }
}
