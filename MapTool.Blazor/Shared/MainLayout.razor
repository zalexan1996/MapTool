@inherits LayoutComponentBase
@inject IDatabaseManagementService _dbService;
@inject IProjectService _projectService;

<PageTitle>MapTool.Blazor</PageTitle>
<BlazorWPF.Common.BlazorWPFLayout>

<div class="sidebar">
    <NavMenu />
</div>

<main style="flex:1">
    <div class="top-row px-4 justify-content-between flex-header">
        <div class="row mt-3">
            @if(ActiveDatabase != null)
            {
                <p class="col-auto mx-2">@ActiveDatabase</p>
            }
            @if(ActiveProject != null)
            {
                <span class="col-auto oi oi-caret-right"></span>
                <p class="col-auto mx-2">@ActiveProject</p>
            }
        </div>
        <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
    </div>

    <article class="content px-4">
        @Body
    </article>
</main>
</BlazorWPF.Common.BlazorWPFLayout>

@code {
    public string? ActiveDatabase { get; set; }
    public string? ActiveProject { get; set; }

    protected override void OnInitialized()
    {
        _dbService.DatabaseChanged += OnDatabaseChanged;
        _projectService.ProjectChanged += OnProjectChanged;

        ActiveDatabase = string.IsNullOrEmpty(_dbService.CurrentDatabaseName) ? null : _dbService.CurrentDatabaseName;
        ActiveProject = string.IsNullOrEmpty(IProjectService.ActiveProject?.Name) ? null : IProjectService.ActiveProject.Name;

        base.OnInitialized();
    }


    private void OnDatabaseChanged(string newName, string newPath)
    {
        ActiveDatabase = string.IsNullOrEmpty(_dbService.CurrentDatabaseName) ? null : _dbService.CurrentDatabaseName;
        ActiveProject = string.IsNullOrEmpty(IProjectService.ActiveProject?.Name) ? null : IProjectService.ActiveProject.Name;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnProjectChanged(string newName)
    {
        ActiveProject = string.IsNullOrEmpty(IProjectService.ActiveProject?.Name) ? null : IProjectService.ActiveProject.Name;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}