@page "/ChooseDatabase"
@inject IDatabaseManagementService _dbService;

<div class="row">
    <div class="col bg-light border border-info mx-2 p-2">
        <h3>Create a database</h3>
        <h5>Criteria for creating a database:</h5>
        <ol>
            <li>There must not be a database with the same name.</li>
            <li>No special characters or spaces.</li>
        </ol>

        <div>
            <div class="form-group">
                <label class="form-label">Database Name</label>
                <input @bind="CreateDatabaseName" class="form-control" id="dbNameInput" />
                <span class="text-danger @(createHasValidationErrors ? "" : "d-none")">You must provide a valid database name.</span>
            </div>
            <button class="btn btn-success my-3" @onclick="OnClick">
                Create
            </button>
        </div>
    </div>
    <div class="col bg-light border border-info mx-2 p-2">
        <h3>Choose an existing database</h3>
        <div class="row">
            @foreach(var db in ExistingDatabase)
            {
                <div class="card col-5 p-0 mx-2 my-1">
                    <div class="card-header">
                        <button class="btn btn-sm btn-success">Use</button>
                        <b class="ms-4">@db.name</b>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col bg-light border border-info mx-2 p-2">
        <h3>Import a database</h3>
        <div class="form-group">
            <label class="form-label">Database Name</label>
            <input @bind="ImportDatabaseName" class="form-control" id="dbNameInput" />
            <span class="text-danger @(importHasValidationErrors ? "" : "d-none")">You must provide a valid database name.</span>
        </div>
        <div class="btn-group">
            <InputFile OnChange="OnDatabaseUpload"></InputFile>
            <button class="btn btn-success" @onclick="OnUploadClick">Upload</button>
        </div>
    </div>

</div>
@code {
    public (string name, string path)[] ExistingDatabase { get; set; }
    public string CreateDatabaseName { get; set; } = "";
    public string ImportDatabaseName { get; set; } = "";
    private readonly string invalidCharacters = ",./?;\"':[]{}!@#$%^&*()-_=+\\| ";
    public IBrowserFile UploadedDatabase { get; set; }
    private bool createHasValidationErrors, importHasValidationErrors = false;

    private bool IsNameAcceptable(string name)
    {
        return !(string.IsNullOrWhiteSpace(name)
            || invalidCharacters.Split().Any(c => name.Contains(c))
            || _dbService.DoesDatabaseExist(name));
    }

    private async void OnClick()
    {
        // Check for validation errors on the database name.
        createHasValidationErrors = !IsNameAcceptable(CreateDatabaseName);

        // Return prematurely if there are validation errors.
        if (createHasValidationErrors)
        {
            return;
        }

        // Create the database.
        var context = await _dbService.CreateDatabase(CreateDatabaseName, CancellationToken.None);
    }

    private async Task OnDatabaseUpload(InputFileChangeEventArgs args)
    {
        UploadedDatabase = args.File;
    }

    private async void OnUploadClick()
    {
        // Check for validation errors on the database name.
        importHasValidationErrors = !IsNameAcceptable(ImportDatabaseName);

        if (UploadedDatabase == null || importHasValidationErrors)
        {
            return;
        }

        var stream = UploadedDatabase.OpenReadStream();

        await _dbService.ImportDatabase(ImportDatabaseName, stream, CancellationToken.None);
    }

    protected override Task OnInitializedAsync()
    {
        ExistingDatabase = _dbService.ListDatabases();

        return base.OnInitializedAsync();
    }
}
