// <auto-generated />
using System;
using MapTool.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapTool.Infrastructure.Migrations
{
    [DbContext(typeof(MapToolDbContext))]
    [Migration("20221201141550_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimatedTileTile", b =>
                {
                    b.Property<int>("AnimatedTileId")
                        .HasColumnType("int");

                    b.Property<int>("TilesId")
                        .HasColumnType("int");

                    b.HasKey("AnimatedTileId", "TilesId");

                    b.HasIndex("TilesId");

                    b.ToTable("AnimatedTileTile");
                });

            modelBuilder.Entity("MapTag", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MapId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MapTag");
                });

            modelBuilder.Entity("MapTool.Domain.Types.AnimatedTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimationDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("AnimationSpeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AnimatedTiles");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Palette", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Palettes");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Prefab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Prefabs");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VersionString")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TilePlacementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TilePlacementId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ParentTilesheetId")
                        .HasColumnType("int");

                    b.Property<int>("StartX")
                        .HasColumnType("int");

                    b.Property<int>("StartY")
                        .HasColumnType("int");

                    b.Property<int?>("TilesheetId")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTilesheetId");

                    b.HasIndex("TilesheetId");

                    b.ToTable("Tile", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MapTool.Domain.Types.TilePlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalDataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<float>("Opacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("PrefabId")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.Property<bool>("VisibleInGame")
                        .HasColumnType("bit");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("PrefabId");

                    b.HasIndex("TileId");

                    b.ToTable("TilePlacements");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tilesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Uniquely identifies this row.")
                        .HasAnnotation("IDENTITY", "1,1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetReference")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tilesheets");
                });

            modelBuilder.Entity("PaletteTile", b =>
                {
                    b.Property<int>("PaletteId")
                        .HasColumnType("int");

                    b.Property<int>("TilesId")
                        .HasColumnType("int");

                    b.HasKey("PaletteId", "TilesId");

                    b.HasIndex("TilesId");

                    b.ToTable("PaletteTile");
                });

            modelBuilder.Entity("PrefabTag", b =>
                {
                    b.Property<int>("PrefabId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("PrefabId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PrefabTag");
                });

            modelBuilder.Entity("MapTool.Domain.Types.UtilityTiles.MapBridgeTile", b =>
                {
                    b.HasBaseType("MapTool.Domain.Types.Tile");

                    b.Property<int>("DestinationMapId")
                        .HasColumnType("int");

                    b.HasIndex("DestinationMapId");

                    b.ToTable("MapBridgeTile", (string)null);
                });

            modelBuilder.Entity("MapTool.Domain.Types.UtilityTiles.SpawnerTile", b =>
                {
                    b.HasBaseType("MapTool.Domain.Types.Tile");

                    b.Property<string>("AssetReference")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("SpawnerTile", (string)null);
                });

            modelBuilder.Entity("AnimatedTileTile", b =>
                {
                    b.HasOne("MapTool.Domain.Types.AnimatedTile", null)
                        .WithMany()
                        .HasForeignKey("AnimatedTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tile", null)
                        .WithMany()
                        .HasForeignKey("TilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapTag", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Map", null)
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapTool.Domain.Types.Map", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Project", null)
                        .WithMany("Maps")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Palette", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Project", null)
                        .WithMany("Palettes")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Prefab", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Project", null)
                        .WithMany("Prefabs")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tag", b =>
                {
                    b.HasOne("MapTool.Domain.Types.TilePlacement", null)
                        .WithMany("Tags")
                        .HasForeignKey("TilePlacementId");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tile", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Tilesheet", "Tilesheet")
                        .WithMany()
                        .HasForeignKey("ParentTilesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tilesheet", null)
                        .WithMany("Tiles")
                        .HasForeignKey("TilesheetId");

                    b.Navigation("Tilesheet");
                });

            modelBuilder.Entity("MapTool.Domain.Types.TilePlacement", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Map", null)
                        .WithMany("TilePlacements")
                        .HasForeignKey("MapId");

                    b.HasOne("MapTool.Domain.Types.Prefab", null)
                        .WithMany("TilePlacements")
                        .HasForeignKey("PrefabId");

                    b.HasOne("MapTool.Domain.Types.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tilesheet", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Project", null)
                        .WithMany("Tilesheets")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("PaletteTile", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Palette", null)
                        .WithMany()
                        .HasForeignKey("PaletteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tile", null)
                        .WithMany()
                        .HasForeignKey("TilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrefabTag", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Prefab", null)
                        .WithMany()
                        .HasForeignKey("PrefabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapTool.Domain.Types.UtilityTiles.MapBridgeTile", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Map", "DestinationMap")
                        .WithMany()
                        .HasForeignKey("DestinationMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapTool.Domain.Types.Tile", null)
                        .WithOne()
                        .HasForeignKey("MapTool.Domain.Types.UtilityTiles.MapBridgeTile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationMap");
                });

            modelBuilder.Entity("MapTool.Domain.Types.UtilityTiles.SpawnerTile", b =>
                {
                    b.HasOne("MapTool.Domain.Types.Tile", null)
                        .WithOne()
                        .HasForeignKey("MapTool.Domain.Types.UtilityTiles.SpawnerTile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapTool.Domain.Types.Map", b =>
                {
                    b.Navigation("TilePlacements");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Prefab", b =>
                {
                    b.Navigation("TilePlacements");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Project", b =>
                {
                    b.Navigation("Maps");

                    b.Navigation("Palettes");

                    b.Navigation("Prefabs");

                    b.Navigation("Tilesheets");
                });

            modelBuilder.Entity("MapTool.Domain.Types.TilePlacement", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MapTool.Domain.Types.Tilesheet", b =>
                {
                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
